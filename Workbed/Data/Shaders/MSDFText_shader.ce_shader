cbuffer GlobalData
{
	Matrix Projection;
};

cbuffer ObjectData
{
	Matrix World;	
	float4 Color;
	float2 Position;
	float2 Size;
};

struct PosVertex
{
	float4 Position : POSITION;
	float2 Tex : TEXCOORD;
};

struct PosColorPixel
{
	float4 Position : SV_POSITION;
	float4 Color : COLOR;
	float2 Tex : TEXCOORD0;
};

Texture2D Texture;
SamplerState Sampler;


PosColorPixel VS(PosVertex aInput)
{
	PosColorPixel output;

	output.Position = aInput.Position;
	//Scale it up from 1x1 to SizeX x SizeY
	output.Position.xy *= Size;

	//Move 0,0 to TopLeft
	//output.Position.x += Size.x;
	//output.Position.y -= Size.y;

	//Movement
	output.Position.x -= 200;//Position.x;
	//output.Position.y -= Position.y;

	output.Position = mul(Projection, output.Position);

	//output.Position.x -= 1;
	//output.Position.y += 1;

	output.Color = Color;
	output.Tex = aInput.Tex;
	//output.TextureSize = TextureSize;
	//output.PXRange = PXRange;
	return output;
};

float median(float r, float g, float b)
{
	return max(min(r, g), min(max(r, g), b));	
};

float4 PS(PosColorPixel anInput) : SV_TARGET
{
	float3 sample = Texture.Sample(Sampler, anInput.Tex).rgb;
	float sigDist = median(sample.r, sample.g, sample.b) - 0.5f;

	float alpha = clamp(sigDist + 0.5f, 0.f, 1.f);
	float4 color = float4(1.f, 1.f, 1.f, alpha);
	
	return color;
};