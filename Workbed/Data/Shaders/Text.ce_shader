#include "Shader_Variables.ce_shader"

cbuffer GlobalData
{
	Matrix Projection;
};

cbuffer ObjectData
{
	Matrix World;	
	float4 Color;
	float2 Position;
	float2 Size;
};

struct PosVertex
{
	float4 Position : POSITION;
	float2 Tex : TEXCOORD;
};

struct PosColorPixel
{
	float4 Position : SV_POSITION;
	float4 Color : COLOR;
	float2 Tex : TEXCOORD0;
};

Texture2D Texture;


PosColorPixel VS(PosVertex aInput)
{
	PosColorPixel output;

	output.Position = aInput.Position;

	//Scale it up from 1x1 to SizeX x SizeY
	output.Position.xy *= Size;

	//Movement
	output.Position.x += Position.x;
	output.Position.y -= Position.y;
	output.Position.y += 3;

	output.Position = mul(Projection, output.Position);

	output.Position.x -= 1;
	output.Position.y += 1;

	output.Color = Color;
	output.Tex = aInput.Tex;
	return output;
};

static const float OUTLINE_MIN_VALUE0 = 0.3;
static const float OUTLINE_MIN_VALUE1 = 0.4;
static const float OUTLINE_MAX_VALUE0 = 0.6;
static const float OUTLINE_MAX_VALUE1 = 0.7;
static const float4 OUTLINE_COLOR = {0.f, 0.f, 0.f, 1.f};
static const bool USE_OUTLINE = true;

static const float SMOOTHING = 1.0/32.0;
float4 PS(PosColorPixel anInput) : SV_TARGET
{
	float distAlphaMask = Texture.Sample(PointSampler, anInput.Tex).a;
	
	float alpha = smoothstep(0.55 - SMOOTHING, 0.55 + SMOOTHING, distAlphaMask);

	float4 color = float4(1.f, 1.f, 1.f, alpha);
	return color;
};