#include "PBL_Helpers.ce_shader"

struct PosUVPixel
{
	float4 Position : SV_POSITION;
	float2 TextureCoord : TEXCOORD;
};

float4 main(PosUVPixel anInput) : SV_TARGET
{
	DeferredPixelData pixelData = CalculateDeferredPixelData(anInput.TextureCoord);

	float ao = CalculateSSAO(anInput.TextureCoord, pixelData.myNormal.xyz, pixelData.myWorldPosition.xyz);
	//float ao = pixelData.myAmbientocclusion;

	float3 reflectionFresnel = ReflectionFresnel(pixelData.mySubstance.xyz, pixelData.myNormal
		, pixelData.myToEye, 1.f - pixelData.myRoughnessOffsetted);

	float3 cubemapColor = float3(0.1f, 0.1f, 0.1f);
	float3 ambientDiffuse = Cubemap.SampleLevel(LinearSampler, pixelData.myNormal, 9).xyz
		* ao * pixelData.myMetalnessAlbedo * (1.f - reflectionFresnel);
	//float3 ambientDiffuse = cubemapColor
	//	* ao * pixelData.myMetalnessAlbedo * (1.f - reflectionFresnel);

	float3 reflectionVector = reflect(pixelData.myNormal, pixelData.myToEye);
	float fakeLysSpecularPower = RoughToSPow(pixelData.myRoughness);
	float lysMipMap = GetSpecPowToMip(fakeLysSpecularPower, 12);

	float3 ambientSpec = Cubemap.SampleLevel(LinearSampler, reflectionVector, lysMipMap).xyz
		* ao * reflectionFresnel;
	//float3 ambientSpec = cubemapColor * ao * reflectionFresnel;

	float3 finalAmbientLight = (ambientDiffuse + ambientSpec);
	


	float3 toLight = -normalize(float3(1.f, 1.f, 1.f));
	float3 lightDir = normalize(toLight);
	float3 halfVec = normalize(lightDir + pixelData.myToEye.xyz);
	float NdotL = saturate(dot(pixelData.myNormal.xyz, lightDir));
	float HdotN = saturate(dot(halfVec, pixelData.myNormal.xyz));
	float NdotV = saturate(dot(pixelData.myNormal.xyz, pixelData.myToEye));

	float3 F = saturate(Fresnel(pixelData.mySubstance.xyz, lightDir, halfVec));
	float D = saturate(D_GGX(HdotN, (pixelData.myRoughness + 1.f) / 2.f));
	float V = saturate(V_SchlickForGGX((pixelData.myRoughness + 1.f) / 2.f, NdotV, NdotL));
	float lambert = NdotL;

	float lightIntensity = 2.f;
	float3 lightColor = float3(0.82f, 0.82f, 0.82f) * lightIntensity;
	float3 directSpecc = F * D * V * NdotL * lightColor;


	float3 finalDirectLight = directSpecc;
	return saturate(float4(finalAmbientLight + finalDirectLight, 1.f));
};